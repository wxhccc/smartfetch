import { SmartFetch } from 'src';
import { ContentType, PromiseWithMethods, RequestConfig } from './types';
export default class SmartFetchCore {
    private $root;
    private _context;
    private _contentType;
    private _isReactiveIns;
    private __response;
    private __resJson;
    private _silence;
    private _needCodeCheck;
    private _codeCheckResult;
    private _lockKey;
    private _useCoreKey;
    private _useCore;
    private _useBaseCfg;
    private _contextState;
    private _fetchConfig;
    private _reqPromise;
    private _failHandler?;
    get $promise(): PromiseWithMethods<any>;
    constructor(rootInstance: SmartFetch, context: any, config: RequestConfig, contentType: ContentType);
    private _axiosRequest;
    private _axiosResStatusCheck;
    private _createRequest;
    private _checkRequestCore;
    private _request;
    private _handleResData;
    private _lock;
    private _unlock;
    private _checkLock;
    private _stateLock;
    private _getLockValue;
    private _getValue;
    private _typeHandle;
    private _resStatusCheck;
    private _handleError;
    private _handleFinally;
    private _resOkCheck;
    private _codeCheck;
    private _checkOrSetVueSAkeys;
    private _setVueValue;
    private _setAsyncValue;
    private useCore;
}
